package leetcode.from551to600;

/**
 * @Author: ZeromaXHe
 * @Time: 2021/9/11 14:57
 * @Description: 600. 不含连续1的非负整数 | 难度：困难 | 标签：动态规划
 * 给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 连续的1 的个数。
 * <p>
 * 示例 1:
 * 输入: 5
 * 输出: 5
 * 解释:
 * 下面是带有相应二进制表示的非负整数<= 5：
 * 0 : 0
 * 1 : 1
 * 2 : 10
 * 3 : 11
 * 4 : 100
 * 5 : 101
 * 其中，只有整数3违反规则（有两个连续的1），其他5个满足规则。
 * 说明: 1 <= n <= 109
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @ModifiedBy: ZeromaXHe
 */
public class Solution600 {
    /**
     * 问题 1：如何计算根结点为 0 的满二叉树中，不包含连续 1 的从根结点到叶结点的路径数量。
     * 问题 2：如何将将字典树拆分为根结点为 0 的满二叉树和根结点不定的完全二叉树。
     * <p>
     * 以下都是阅读题解，不是自己写的
     * <p>
     * 执行用时： 1 ms , 在所有 Java 提交中击败了 99.28% 的用户
     * 内存消耗： 35.6 MB , 在所有 Java 提交中击败了 38.85% 的用户
     * 通过测试用例： 527 / 527
     * <p>
     * 作者：LeetCode-Solution
     * 链接：https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/solution/bu-han-lian-xu-1de-fei-fu-zheng-shu-by-l-9l86/
     * 来源：力扣（LeetCode）
     * 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
     *
     * @param n
     * @return
     */
    public int findIntegers(int n) {
        if (n <= 2) {
            return n + 1;
        }
        int[] dp = new int[31];
        dp[0] = dp[1] = 1;
        // 我们发现，在高度为 t、根结点为 0 的满二叉树中：其左子结点是高度为 t-1、根结点为 0 的满二叉树。
        // 其右子结点是高度为 t-1、根结点为 1 的满二叉树；
        // 但是因为路径中不能有连续 1，所以右子结点下只有其左子结点包含的从根结点到叶结点的路径才符合要求，
        // 而其左子结点是高度为 t−2、根结点为 0 的满二叉树。
        //
        // 于是，高度为 t、根结点为 0 的满二叉树中不包含连续 1 的从根结点到叶结点的路径数量，
        // 等于高度为 t−1、根结点为 0 的满二叉树中的路径数量与高度为 t−2，根结点为 0 的满二叉树中的路径数量之和。
        //
        // 这个规律自己没找出来，用动规
        for (int i = 2; i < 31; ++i) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }

        /*

         * 考虑到 01 字典树作为完全二叉树所具有的性质，我们可以从根结点开始处理。
         * 如果当前结点包含两个子结点，则用问题 1 的解决方法计算其左子结点中不包含连续 1 的从根结点到叶结点的路径数量，并继续处理其右子结点；
         * 如果当前结点只包含一个左子结点，那么继续处理其左子结点。
         * 在实现中，需要注意如果已经出现连续 1 则不用继续处理；另外，叶结点没有子结点，需要作为特殊情况单独处理。
         */
        int pre = 0, res = 0;
        for (int i = 29; i >= 0; --i) {
            int val = 1 << i;
            if ((n & val) != 0) {
                res += dp[i + 1];
                if (pre == 1) {
                    break;
                }
                pre = 1;
            } else {
                pre = 0;
            }

            if (i == 0) {
                ++res;
            }
        }

        return res;
    }
}
