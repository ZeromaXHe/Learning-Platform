package leetcode.from601to650;

import org.junit.Assert;
import org.junit.Test;

/**
 * @Author: zhuxi
 * @Time: 2021/9/27 10:01
 * @Description: 639. 解码方法 II | 难度：困难 | 标签：字符串、动态规划
 * 一条包含字母 A-Z 的消息通过以下的方式进行了编码：
 * <p>
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 * 要 解码 一条已编码的消息，所有的数字都必须分组，然后按原来的编码方案反向映射回字母（可能存在多种方式）。例如，"11106" 可以映射为：
 * <p>
 * "AAJF" 对应分组 (1 1 10 6)
 * "KJF" 对应分组 (11 10 6)
 * 注意，像 (1 11 06) 这样的分组是无效的，因为 "06" 不可以映射为 'F' ，因为 "6" 与 "06" 不同。
 * <p>
 * 除了 上面描述的数字字母映射方案，编码消息中可能包含 '*' 字符，可以表示从 '1' 到 '9' 的任一数字（不包括 '0'）。
 * 例如，编码字符串 "1*" 可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条消息。
 * 对 "1*" 进行解码，相当于解码该字符串可以表示的任何编码消息。
 * <p>
 * 给你一个字符串 s ，由数字和 '*' 字符组成，返回 解码 该字符串的方法 数目 。
 * <p>
 * 由于答案数目可能非常大，返回对 10^9 + 7 取余 的结果。
 * <p>
 * 示例 1：
 * 输入：s = "*"
 * 输出：9
 * 解释：这一条编码消息可以表示 "1"、"2"、"3"、"4"、"5"、"6"、"7"、"8" 或 "9" 中的任意一条。
 * 可以分别解码成字符串 "A"、"B"、"C"、"D"、"E"、"F"、"G"、"H" 和 "I" 。
 * 因此，"*" 总共有 9 种解码方法。
 * <p>
 * 示例 2：
 * 输入：s = "1*"
 * 输出：18
 * 解释：这一条编码消息可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条。
 * 每种消息都可以由 2 种方法解码（例如，"11" 可以解码成 "AA" 或 "K"）。
 * 因此，"1*" 共有 9 * 2 = 18 种解码方法。
 * <p>
 * 示例 3：
 * 输入：s = "2*"
 * 输出：15
 * 解释：这一条编码消息可以表示 "21"、"22"、"23"、"24"、"25"、"26"、"27"、"28" 或 "29" 中的任意一条。
 * "21"、"22"、"23"、"24"、"25" 和 "26" 由 2 种解码方法，但 "27"、"28" 和 "29" 仅有 1 种解码方法。
 * 因此，"2*" 共有 (6 * 2) + (3 * 1) = 12 + 3 = 15 种解码方法。
 * <p>
 * 提示：
 * 1 <= s.length <= 10^5
 * s[i] 是 0 - 9 中的一位数字或字符 '*'
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/decode-ways-ii
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @ModifiedBy: zhuxi
 */
public class Solution639 {
    @Test
    public void testNumDecodings() {
        // 0必须和前面组合在一起
        Assert.assertEquals(404, numDecodings("*1*1*0"));
    }

    /**
     * 执行用时： 8 ms , 在所有 Java 提交中击败了 94.48% 的用户
     * 内存消耗： 38.4 MB , 在所有 Java 提交中击败了 100.00% 的用户
     * 通过测试用例： 217 / 217
     *
     * @param s
     * @return
     */
    public int numDecodings(String s) {
        long[] dp = new long[3];
        dp[1] = 1;
        dp[0] = 1;
        int len = s.length();
        for (int i = 0; i < len; i++) {
            if (s.charAt(i) == '*') {
                dp[2] = dp[1] * 9;
                if (i > 0) {
                    if (s.charAt(i - 1) == '1') {
                        dp[2] += dp[0] * 9;
                    } else if (s.charAt(i - 1) == '2') {
                        dp[2] += dp[0] * 6;
                    } else if (s.charAt(i - 1) == '*') {
                        dp[2] += dp[0] * 15;
                    }
                }
            } else if (s.charAt(i) == '0') {
                if (i == 0) {
                    return 0;
                }
                if (s.charAt(i - 1) == '*') {
                    dp[2] = 2 * dp[0];
                    dp[1] = 0;
                } else if (s.charAt(i - 1) == '1' || s.charAt(i - 1) == '2') {
                    dp[2] = dp[0];
                    dp[1] = 0;
                } else {
                    return 0;
                }
            } else {
                dp[2] = dp[1];
                if (i > 0) {
                    if (s.charAt(i - 1) == '1') {
                        dp[2] += dp[0];
                    } else if (s.charAt(i - 1) == '2') {
                        if (s.charAt(i) <= '6' && s.charAt(i) >= '0') {
                            dp[2] += dp[0];
                        }
                    } else if (s.charAt(i - 1) == '*') {
                        if (s.charAt(i) <= '6' && s.charAt(i) >= '0') {
                            dp[2] += dp[0] * 2;
                        } else {
                            dp[2] += dp[0];
                        }
                    }
                }
            }
            dp[2] = dp[2] % 1_000_000_007;
            dp[0] = dp[1];
            dp[1] = dp[2];
        }
        return (int) dp[2];
    }
}
