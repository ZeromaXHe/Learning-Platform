package leetcode.chengxuyuan_mianshi_jingdian;

import org.junit.Test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * @Author: zhuxi
 * @Time: 2022/2/11 15:36
 * @Description: 面试题 17.26. 稀疏相似度 | 难度：困难 | 标签：数组、哈希表、排序
 * 两个(具有不同单词的)文档的交集(intersection)中元素的个数除以并集(union)中元素的个数，就是这两个文档的相似度。
 * 例如，{1, 5, 3} 和 {1, 7, 2, 3} 的相似度是 0.4，其中，交集的元素有 2 个，并集的元素有 5 个。
 * 给定一系列的长篇文档，每个文档元素各不相同，并与一个 ID 相关联。它们的相似度非常“稀疏”，也就是说任选 2 个文档，相似度都很接近 0。
 * 请设计一个算法返回每对文档的 ID 及其相似度。只需输出相似度大于 0 的组合。
 * 请忽略空文档。为简单起见，可以假定每个文档由一个含有不同整数的数组表示。
 * <p>
 * 输入为一个二维数组 docs，docs[i] 表示 id 为 i 的文档。
 * 返回一个数组，其中每个元素是一个字符串，代表每对相似度大于 0 的文档，其格式为 {id1},{id2}: {similarity}，
 * 其中 id1 为两个文档中较小的 id，similarity 为相似度，精确到小数点后 4 位。以任意顺序返回数组均可。
 * <p>
 * 示例:
 * <p>
 * 输入:
 * [
 *   [14, 15, 100, 9, 3],
 *   [32, 1, 9, 3, 5],
 *   [15, 29, 2, 6, 8, 7],
 *   [7, 10]
 * ]
 * 输出:
 * [
 *   "0,1: 0.2500",
 *   "0,2: 0.1000",
 *   "2,3: 0.1429"
 * ]
 * 提示：
 * <p>
 * docs.length <= 500
 * docs[i].length <= 500
 * <p>
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/sparse-similarity-lcci
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @ModifiedBy: zhuxi
 */
public class Solution17_26 {
    @Test
    public void computeSimilaritiesTest() {
        System.out.println(computeSimilarities(new int[][]{
                {14, 15, 100, 9, 3},
                {32, 1, 9, 3, 5},
                {15, 29, 2, 6, 8, 7},
                {7, 10}
        }));

        int[][] docs = {
                {5315, 34275, 30345, 96075, 143, 42260, 35929, 66682, 12699, 9660},
                {74424, 35402, 21820, 57325},
                {257, 95620, 97160, 783, 7312, 75666, 28311, 94365, 10528, 4898, 4519, 50856, 73385, 55222, 93750, 68543, 28992, 19784, 36427, 67532, 99662, 72657, 50770, 71123, 37207, 53592, 3676, 55902, 57055, 8933, 23143, 67432, 27240, 57198, 70641, 93169, 6385, 6004},
                {78081, 9734, 1164, 8466, 87292, 64795, 76831, 2978, 83063, 99109, 56103, 54567, 40358, 67380, 49464, 69186, 84677, 95174, 49477, 66632, 69573, 62795, 25039, 19536, 49105, 76244, 20308, 30808, 29917, 5087, 22880, 47202, 41061, 85093, 7785, 11370, 71532, 27374, 26991, 49779, 32883, 74483, 27894, 17654, 96892, 72701, 1407},
                {49793, 79234, 56451, 41220, 79642, 33701, 70442, 23214, 89008, 50235, 52286, 59328, 44355, 77011, 45015, 7012, 53621, 51191, 4089, 42109, 69759},
                {95072, 35682, 10119, 56233, 8970, 80553, 61356, 57388, 51406, 68140, 41076, 21654},
                {18561, 52484, 76554, 55949, 55311, 59159, 60065, 11939, 71342, 8371, 95797, 52919, 75836, 14013, 9669, 69189, 72391, 22344, 57934, 53842, 43731, 76628, 16213, 26329, 6364, 48990, 63986, 10995, 13049},
                {55266, 67012, 44159, 7546, 17307, 18751},
                {59527, 46095, 60313, 93978, 62619, 20893, 2078, 27175, 56360, 56879, 91826, 89404, 55233, 11717, 21320, 77776, 29522, 97659, 92498, 84565, 35928, 29281, 31976, 10089, 69236, 96891, 93820, 60029},
                {7948, 30479, 51358, 36894, 72737, 61101, 48304, 11960, 19776, 7495, 70223, 47444, 89439, 89058, 83684, 17381, 24934, 61807, 67697, 79986, 59507, 56695},
                {9089, 7952, 16018, 67607, 29598, 92321, 61220, 99495, 2731, 55852, 14767, 79927, 32571, 84928, 40390, 95174, 45130, 5325, 91224, 34010, 20191, 55138, 47331, 44004, 72296, 37353, 7787, 77039, 78191, 19702, 70653, 14079},
                {6112, 6820, 75913, 12784, 89586, 6490, 70463},
                {2307, 69891, 28547, 4614, 89223, 49032, 68358, 72074, 81441, 72625, 74289, 60990, 329, 86217, 1743, 33359, 18390, 12382, 29795, 22126, 28919, 52217, 91773},
                {42050, 2021, 67917, 15760, 6513, 76048, 40051, 89305, 1854},
                {73092, 93573, 65290, 35343, 94744, 60056, 11545, 47899, 17948, 49309, 6942, 95520, 32939, 72239, 37681, 73272, 10298, 26811, 35324, 42438, 82891, 15948, 39508, 68181, 25176, 4442, 73051, 97114, 81629, 11230, 59362, 20838, 39024, 80496, 48371, 69111, 38652, 90621, 20478},
                {1968, 80, 1678},
                {64256, 23812, 8713, 51084, 42254, 73618, 34581, 31262, 49954, 62760, 21433, 65468, 45249, 89797, 9801, 19401, 87115, 61262, 27475, 5334, 21720, 96344, 87516, 69217, 74344, 23144, 2665, 18283, 41840, 61684, 52853, 6646, 84598},
                {73220, 40584, 30728, 92811, 79251, 96532, 11157, 65940, 19865, 76575, 25123, 24868, 22693, 9894, 4646, 7332, 13609, 89387, 36782, 11312, 14132, 85303, 51256, 51642, 45502, 19265, 82625, 9288, 68429, 76750, 94801, 7293, 8794, 37343, 48995, 71780, 68069, 67301, 6121, 74478, 83440, 51955, 15095, 46712, 20605},
                {38786, 6276, 35462, 44935, 91657, 8970, 42123, 62857, 72209, 28818, 39190, 64919, 90393, 36638, 53919, 36006, 2215, 75432, 56367, 94257, 56882, 4917, 64438, 19514, 28990, 76357, 78408, 99153, 68949, 44246, 54869, 19034, 25438, 28130, 17129, 83443, 38261, 19319},
                {60674, 70791, 50443, 639, 56341, 24734, 4899, 14893, 6583, 21816, 76095, 4416, 10178, 61636, 87751, 75594, 83404, 24915, 56408, 62425, 67549, 92129, 86627, 49512, 64630, 7421, 99967},
                {79616, 80514, 42629, 55561, 9234, 27539, 43923, 150, 81942, 66327, 94742, 88474, 3999, 68895, 44705, 45215, 48039, 84136, 98605, 67637, 32573, 53568, 14018, 47302, 8904, 49360, 63441, 67537, 64595, 93904, 26455, 26584, 99929, 51036, 77279, 28513, 79074, 1125, 4582, 18155, 96750, 53614, 97777, 81908, 3317, 27126, 12793, 97791},
                {98048, 68034, 76259, 3973, 27431, 7690, 8523, 90570, 75274, 68754, 92694, 55930, 71418, 21599, 54591},
                {1931, 6385, 1013, 540, 5598},
                {8394, 95290, 16181},
                {2809},
                {84353, 45058, 26630, 8839, 70152, 22289, 13842, 83347, 86676, 31635, 43414, 37400, 43548, 27550, 39074, 57637, 84005, 85424, 92337, 36020, 97204, 67638, 88889, 55866, 53433, 78654, 2495, 78403, 61388, 37581, 56144, 26834, 95571, 33627, 55389, 54624, 37985, 95972, 52070, 55402, 74864, 14453, 82294, 20599, 41598},
                {4671},
                {69760, 37889, 71427, 10755, 82438, 54925, 34192, 2963, 12948, 40339, 62495, 32160, 98849, 78495, 63657, 40365, 60846, 53807, 91057, 46261, 64311, 72890, 90556, 85437, 12618, 25167, 62928, 22868, 42581, 87126, 4951, 50776, 82649, 49885, 9182, 56414, 53473, 12649, 60266, 75499, 17001, 96362, 16118, 69112, 21502},
                {2307, 80772, 37894, 13706, 15755, 52874, 65165, 47249, 47508, 58132, 11414, 60695, 51734, 16664, 3224, 70044, 97822, 48419, 65702, 77992, 85032, 11432, 87723, 42540, 78765, 83118, 93486, 8249, 41020, 68290, 19411, 62036, 51669, 48726, 15063, 98389, 50397, 42208, 14818, 93410, 66148, 76147, 13429, 52085, 7543, 83321, 637, 83839},
                {12160, 7309, 51091, 7578, 2978, 17187, 4646, 21168, 31227, 7869, 42558, 11079, 1358, 28378, 31328, 65774, 27122, 70520, 52603, 380},
                {4614, 57224, 38024, 42236, 83740, 64291, 99504, 49096, 43091, 31195, 15323, 41183, 93665, 95588, 82410, 97515, 37484, 12271, 71415, 75260},
                {81217, 15524, 72432, 4723, 5270, 22969, 78619, 49950},
                {18944, 81152, 71042, 55557, 4233, 8204, 269, 26897, 22291, 46103, 72605, 64672, 28832, 34850, 62114, 43555, 48039, 6957, 68658, 38965, 76471, 15546, 23997, 55487, 65600, 36417, 83523, 41411, 2760, 86091, 2124, 16721, 74196, 97752, 1241, 86489, 13016, 70109, 69217, 43748, 86244, 89958, 40042, 79988, 91512, 78713, 7546},
                {87171, 38020, 86020, 35460, 22536, 14094, 93716, 17687, 63512, 62873, 64541, 44961, 12321, 55227, 80955, 46784, 5825, 10305, 36807, 24394, 99658, 88939, 73581, 86003, 60027},
                {8713, 23498, 7948, 99026},
                {9408, 9860, 62182, 43974, 1358, 1743, 47603, 42773, 22934, 9113, 3001, 33214},
                {31617, 78978, 33539, 65927, 82952, 83081, 3210, 34445, 2321, 67987, 85530, 10534, 11948, 60848, 7092, 74420, 78401, 8770, 92230, 30022, 64327, 15305, 76887, 37339, 10850, 9317, 98921, 97645, 73724},
                {5825, 69954, 80867, 97156, 40837, 84586, 25009, 819, 60087, 24984, 74714, 61309},
                {94722, 51399, 90104, 39155, 9878, 95639, 26940, 91702, 9660, 39454, 64575},
                {49793, 55556, 10254, 61072, 18451, 62232, 9894, 77094, 5673, 44458, 55481, 443, 36926, 23615, 4671, 45890, 35657, 35146, 92491, 17759, 46442, 79739},
                {34690, 98309, 2438, 31751, 43274, 98955, 98831, 76178, 51092, 61211, 37148, 97566, 96671, 64171, 1968, 38321, 22450, 4275, 13508, 22598, 3658, 41804, 25804, 17486, 78799, 73553, 68820, 97878, 15192, 49241, 16733, 1119, 40420, 46694, 64615, 57594, 5229, 33008, 17528, 83577, 90618, 12412, 61694},
                {32226, 2946, 26534, 18535, 57063, 95753, 33705, 67120, 96564, 67286, 59546, 75804, 8095},
                {92416, 38656, 20998, 96903, 41480, 17033, 7690, 61447, 2440, 74511, 12051, 18580, 70421, 50966, 59543, 18459, 50078, 60197, 76084, 53943, 82107, 35388, 3005, 8637, 36286, 31676, 28225, 82114, 92484, 65095, 87752, 40393, 18761, 11474, 48983, 69087, 58208, 18272, 68863, 8293, 34789, 232, 71279, 98800, 73078, 72187, 40316, 50686, 98431},
                {52226, 1091, 1188, 41062, 44870, 40488, 40232, 73256, 82128, 8657, 4987, 35261},
                {66306, 95108, 63117, 81550, 89229, 65937, 43160, 1307, 71585, 51873, 23969, 51748, 17703, 23719, 52393, 20906, 71342, 51759, 76985, 3899, 51146, 58315, 73933, 80462, 2511, 7892, 9946, 43355, 43994, 76125, 64991, 90082, 11113, 2666, 85356, 61939, 25972, 18931, 44535, 10104, 58617, 92285},
                {9218, 62345, 95114, 36238, 93454, 45584, 89620, 65942, 36905, 25007, 57010, 68795, 36411, 25148, 77630, 80321, 62404, 75205, 46662, 67271, 97866, 87498, 2253, 83533, 25165, 95060, 96214, 82400, 97001, 22378, 59499, 56831, 86382, 53234, 89343},
                {65665, 1794, 38403, 25732, 40071, 56595, 46615, 51355, 47905, 26148, 46885, 10533, 3752, 19881, 69420, 15792, 92341, 14908, 17214, 58818, 95043, 65990, 77511, 70600, 53193, 59605, 81494, 30430, 38243, 39012, 20840, 96498, 56052, 20093, 81022},
                {61411, 998, 54791, 77352, 78886, 16109, 26285, 62093, 8944, 73008, 43858, 5300, 4348, 3005, 70430},
                {51586, 42629, 80134, 45706, 10641, 43794, 88726, 19736, 7325, 78759, 90279, 29868, 82990, 97070, 33459, 82871, 23747, 85316, 18118, 95943, 75724, 82765, 97998, 85328, 32852, 40025, 78425, 24795, 73953, 67556, 16357, 10219, 27244, 11886, 15343, 68592, 98673, 13937, 96373, 45438},
                {37251, 80260, 99463, 47243, 36115, 80533, 38679, 68120, 7578, 97435, 56092, 64290, 26659, 39332, 4648, 15400, 54318, 36401, 68800, 36423, 66126, 36180, 46549, 10070, 32215, 12248, 19033, 2904, 62938, 20704, 64096, 70882, 95203, 55907, 80230, 95335, 90228, 69629},
                {7175, 25223, 1931, 56204, 79755, 143, 80146, 20882, 98197, 13976, 62364, 69277, 81951, 58151, 57001, 34735, 31028, 58292, 33720, 67770, 76986, 79553, 85316, 52811, 18252, 62929, 9561, 29027, 36836, 66919, 78695, 48368, 95473, 4723, 12916, 9464, 8569, 36349},
                {3425, 12769, 57956, 50661, 58118, 50216, 44169, 11724, 51021, 1678, 63986, 40467, 36182, 32951, 59544, 8734},
                {64353, 51394, 86594, 93412, 10982, 5608, 80364, 77070, 95000, 11606, 49975, 47416, 8025, 47674},
                {11779, 94724, 36742, 75404, 25238, 1815, 41240, 77847, 97306, 92958, 58144, 34337, 69538, 45734, 11695, 73655, 38215, 89803, 53324, 93133, 96333, 3025, 16468, 85076, 2902, 44920, 9176, 88793, 57948, 77533, 69346, 44003, 74474, 60658, 72565, 65528, 38523, 27644, 97662},
                {66554, 88968, 79884, 44173, 73871, 1553, 80283, 64802, 4771, 79268, 39845, 28204, 6957, 36268, 90159, 46126, 89773, 36155, 63423, 90575, 95056, 86225, 38481, 97754, 5723, 6366, 51554, 84962, 47333, 40679, 21355, 63095, 99320, 98681, 57850},
                {14594, 34179, 40196, 52620, 4753, 47764, 20245, 18841, 5020, 84647, 5928, 99116, 9007, 687, 2097, 22072, 49209, 19134, 10561, 34499, 63689, 15436, 96081, 41428, 31065, 35545, 25180, 30940, 48862, 3932, 31328, 9827, 93029, 20455, 99566, 54000, 82292, 5237, 78453, 81271, 96378, 69115},
                {17538, 67463, 33161, 95256, 97950, 23455, 98465, 50339, 804, 76715, 86065, 59570, 63154, 59957, 81976, 51641, 33978, 60349, 61246, 77634, 90568, 7512, 30812, 47196, 16098, 84450, 95972, 93415, 66025, 71916, 79471, 56820, 53877, 5369, 55678, 55935},
                {34690, 14210, 41737, 2569, 10636, 21388, 46220, 94485, 98969, 65053, 42653, 25631, 82595, 40616, 59560, 63276, 73388, 814, 26163, 1331, 17727, 1091, 50375, 6477, 50898, 14547, 39506, 8793, 37722, 5600, 16224, 38754, 93412, 21477, 24421, 38884, 41834, 69867, 48875, 15725, 61806, 46446, 93807, 45676, 14189, 63349, 41983},
                {52930, 92003, 24905, 3275, 4753, 68881, 36145, 7892},
                {16398, 17560, 54810, 1755, 8189, 6366},
                {96136, 92040, 9098, 67599, 88720, 46095, 97821, 76452, 43564, 63533, 82988, 41776, 57529, 39745, 23239, 13640, 2253, 8527, 40277, 44374, 74843, 40540, 82788, 77926, 486, 75369, 78445, 23540, 72439, 62073, 81404},
                {86114, 89253, 66122, 87371, 52907, 5357, 92366, 49997, 53054, 19825, 19922, 1267, 53431, 25720, 76828, 81086},
                {11904, 45856, 15874, 33220, 8839, 29165, 82575, 29232, 62193, 5300, 46132, 15835},
                {2945, 48261, 55308, 6030, 84879, 48025, 67482, 85659, 7324, 36382, 59295, 71200, 31785, 85421, 44974, 98223, 37553, 75444, 67124, 88248, 1854, 85951, 85950, 9790, 31810, 17865, 6859, 30539, 89167, 35153, 40154, 23003, 33761, 19043, 37350, 51687, 31719, 57703, 2666, 49266, 2419, 64115, 39412, 16499, 380, 14079},
                {35876, 29126, 8239, 22423, 99641, 10362, 1755},
                {59394, 52387, 80932, 998, 7175, 13404},
                {52230, 12296, 76296, 89867, 10637, 78607, 82961, 52883, 56852, 8598, 14748, 4382, 55714, 68910, 29746, 24888, 84539, 38588, 7869, 44865, 96707, 73797, 7241, 39500, 25682, 69845, 13911, 8793, 71899, 17887, 75872, 55140, 30063, 30832, 23664, 88818, 2419, 16244, 5616, 19322, 29694},
                {3840, 8717, 94863, 22544, 2321, 89746, 59413, 37527, 81562, 34588, 67612, 20894, 5920, 39332, 33956, 3622, 55082, 2873, 62394, 190, 4416, 62787, 86597, 25033, 25418, 8527, 16215, 64861, 90853, 66679, 41855},
                {70913, 78466, 44162, 68232, 2057, 87305, 54805, 79385, 33561, 71708, 33826, 27302, 80042, 54572, 16942, 65202, 32818, 68407, 22586, 9919, 25282, 46530, 80581, 89285, 57163, 25039, 43088, 2386, 63963, 28123, 59101, 90334, 27491, 5478, 56809, 27756, 39917, 96750, 57071, 33901, 72949, 9462, 38262, 5369, 76668, 59645, 45951},
                {78464, 42880, 92162, 58245, 47751, 16909, 49549, 62479, 6288, 70544, 61859, 49060, 71718, 39847, 83624, 37673, 62891, 44716, 22571, 6319, 93745, 94006, 34618, 5315, 57284, 3779, 95811, 71367, 9797, 8523, 8657, 18642, 89939, 26195, 70996, 38102, 8536, 71643, 24284, 58079, 35303, 81639, 361, 8296, 61932, 79340, 43765, 69113, 52092, 2687},
                {48260, 8078, 45584, 7059, 58004, 663, 61977, 29081, 43553, 35622, 83110, 81833, 68907, 13741, 12334, 29874, 93875, 88757, 98230, 46137, 93766, 2760, 70350, 88655, 83803, 82524, 73952, 87139, 8944, 24945, 61951},
                {81414, 95110, 51466, 88715, 64406, 535, 663, 80035, 37285, 49575, 79145, 76969, 76977, 69688, 31801, 45757, 37828, 3403, 44622, 11604, 72021, 48089, 42460, 98652, 50526, 57183, 94178, 86627, 9705, 96490, 1387, 34545, 89073, 69491, 626, 87794, 51321, 80122, 2046},
                {41985, 73478, 87174, 71304, 97030, 38285, 25869, 32142, 785, 40724, 59286, 9369, 7324, 52638, 11427, 83109, 79795, 35764, 11573, 99639, 52024, 43575, 93115, 5055, 67136, 7879, 13896, 44361, 33995, 27467, 974, 55758, 37971, 68307, 24915, 63318, 44631, 71636, 41309, 5215, 33249, 37731, 60521, 99436, 88815, 52724, 23671, 98168, 60921, 98558},
                {7309, 34833, 32797, 6942, 43557, 55862, 71994, 41147, 74426, 22473, 85195, 62415, 15441, 21592, 47833, 99033, 9561, 14168, 22116, 11496, 1387, 76270, 1013, 23416, 9465},
                {1665, 85514, 18316, 38156, 79118, 78095, 14353, 4113, 36113, 46614, 36255, 51108, 63526, 76712, 36271, 5811, 14262, 34358, 24504, 87862, 19003, 32573, 8255, 36417, 97860, 31558, 13255, 31048, 45512, 24647, 99279, 9301, 80599, 5598, 54239, 37343, 50145, 98787, 81637, 35557, 62061, 14317, 68469, 94072, 39161},
                {67841, 66690, 65544, 98570, 98577, 36631, 67993, 78874, 95514, 540, 17561, 17566, 26783, 20381, 55195, 26491, 74662, 65068, 19756, 6319, 18224, 2871, 84152, 23610, 36924, 84037, 4806, 99795, 30163, 43734, 8290, 73314, 24420, 79207, 5359, 25968, 8189, 28529, 43252, 51833, 5499, 27388, 9085},
                {27010, 40325, 44166, 5895, 6028, 74390, 60311, 9113, 49177, 87455, 8100, 58150, 39725, 62511, 75698, 31026, 11828, 76218, 98881, 32065, 6599, 2250, 48970, 83155, 79571, 74842, 18268, 85214, 41313, 30689, 13281, 27368, 86761, 73713, 85620, 59512, 34425},
                {24610, 78853, 20774, 50792, 814, 5270, 12598, 5207, 12022, 63163, 27164},
                {36065, 58723, 73860, 6820, 33060, 73159, 43691, 3820, 13645, 5998, 22572, 87089, 30227, 49145, 81977},
                {65539, 2057, 52878, 93976, 7962, 3999, 93985, 70313, 94896, 53684, 82614, 99142, 50118, 59338, 81613, 26959, 17106, 14547, 8405, 47831, 7512, 24672, 73827, 79590, 60905, 62060, 61165, 28532, 13428, 8825, 43517},
                {18945, 11618, 17411, 65635, 35270, 36870, 82987, 32620, 23053, 32238, 9233, 16820, 63192, 32026, 20219, 20509, 18398},
                {12417, 46597, 29325, 93838, 68372, 37667, 10150, 99240, 47737, 69428, 42294, 72888, 89018, 60357, 17865, 3275, 46157, 67407, 25425, 91217, 95315, 6997, 76634, 20058, 70750, 7648, 93923, 13162, 32111, 34290, 68214, 54648, 55161, 93435},
                {23818, 36242, 90644, 84502, 12952, 84510, 3236, 68652, 73008, 46644, 76028, 80055, 55868, 42557, 45504, 59841, 35401, 96970, 51021, 90965, 98518, 81111, 31451, 75612, 28384, 80232, 86249, 40041, 45804, 38001, 82802, 76147, 82681, 48250, 88060, 54655},
                {4133, 26444, 66733, 1295, 2639, 8466, 66674, 91092, 98771, 92666, 39550},
                {11146, 57098, 7052, 7826, 42775, 89880, 54301, 8734, 77862, 94374, 2090, 81835, 78764, 38448, 39984, 4404, 37684, 3898, 75323, 19004, 36162, 85968, 73169, 6610, 84441, 54618, 78687, 97503, 11626, 748, 55021, 52847, 99323, 46332},
                {17411, 98179, 22407, 98697, 48269, 67599, 16022, 51484, 48670, 16158, 43041, 61475, 88108, 70965, 5306, 87103, 68675, 97872, 69586, 47572, 91097, 73820, 84447, 64995, 93289, 73961, 97772, 11373, 86772, 12669},
                {54220, 72517},
                {65792, 57482, 58892, 43020, 26384, 50972, 35065, 65703, 7341, 64952, 59455, 836, 6859, 64461, 85083, 66782, 82534, 68457, 11249, 50294, 2809, 3450, 55035, 6525, 76287},
                {23552, 28675, 91267, 62213, 8465, 3473, 99092, 51604, 76571, 48668, 18851, 42404, 40868, 24614, 87462, 71845, 68275, 99636, 51765, 81719, 44220, 19389, 70845, 22082, 74562, 94532, 53442, 30403, 52091, 25416, 58953, 41426, 27221, 11609, 29531, 4573, 8680, 89583, 35951, 9464, 14843, 2172},
                {6112, 4578, 82949, 4485, 65483, 7952, 41424, 80184, 67289, 56602, 52989},
                {59654, 783, 82068, 49435, 70427, 95647, 91296, 96676, 88695, 6057, 48429, 80308, 38838, 5815, 71882, 96587, 36555, 25931, 73209, 77687, 9301, 89430, 62422, 78167, 41181, 34399, 72160, 43620, 8569, 25577, 4971, 6385, 18033, 83316, 64119, 8313, 11002},
                {897, 54914, 15491, 35079, 65936, 90516, 47254, 7962, 55455, 21544, 2090, 76460, 4141, 61103, 14770, 74295, 16825, 96703, 3905, 10310, 6868, 70743, 82135, 3673, 68828, 15196, 7519, 36198, 5998},
                {897, 66574, 82068, 98581, 12697, 47269, 40109, 83384, 51906, 98129, 17745, 31187, 42581, 29146, 8794, 55005, 66653, 80605, 50280},
                {8313, 3752, 7092, 8919, 4089, 4987, 1407},
                {48513, 2949, 3209, 23818, 3339, 69389, 33166, 88848, 99217, 61331, 30615, 17050, 66333, 89632, 83364, 26021, 9895, 47022, 3246, 88241, 67634, 17204, 97726, 83398, 90695, 95944, 31305, 8394, 47180, 58321, 4305, 53843, 77654, 2006, 4441, 11238, 38888, 96490, 62445, 42222, 74607, 61553, 98163, 28152, 68090, 82427, 51068, 72958},
                {66833, 8919},
                {84000, 94593, 92613, 61639, 12039, 37775, 9007, 12720, 82390, 30230, 65942},
                {7385, 21817, 73512, 8040, 86666, 54507, 7951, 3673, 10558},
                {82560, 60290, 35338, 25227, 21778, 35474, 43156, 78101, 150, 62230, 90771, 50589, 30367, 45088, 89762, 3107, 91900, 61094, 35623, 91317, 3899, 11707, 198, 98248, 54474, 66508, 94413, 27855, 60497, 94034, 66516, 80731, 81116, 48734, 56161, 4578, 39394, 74852, 87401, 26217, 93417, 96239, 68080, 83060, 12793, 35066, 59260, 22909, 55807},
                {25474, 6028, 36623, 75284, 9878, 41238, 20644, 34474, 72747, 83134, 82495, 22080, 20032, 15814, 90573, 80, 85585, 17235, 6868, 995, 17253, 59755, 58350, 9462, 57974, 41978}
        };
        List<String> similarities = computeSimilarities(docs);
        Collections.sort(similarities);
        HashSet<String> set = new HashSet<>(similarities);
        List<String> similarities2 = computeSimilarities2(docs);
        Collections.sort(similarities2);
        HashSet<String> set2 = new HashSet<>(similarities2);
        System.out.println("=============");
        System.out.println(similarities);
        System.out.println("-------------");
        System.out.println(similarities2);
        System.out.println("=============");
        for (String s : set2) {
            if (!set.contains(s)) {
                System.out.println("set doesn't contain \"" + s + "\"");
            }
        }
        for (String s : set) {
            if (!set2.contains(s)) {
                System.out.println("set2 doesn't contain \"" + s + "\"");
            }
        }
    }

    /**
     * 执行用时： 1345 ms , 在所有 Java 提交中击败了 16.07% 的用户
     * 内存消耗： 92.2 MB , 在所有 Java 提交中击败了 5.36% 的用户
     * 通过测试用例： 33 / 33
     *
     * @param docs
     * @return
     */
    public List<String> computeSimilarities(int[][] docs) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        HashSet<Integer> moreThan1Set = new HashSet<>();
        for (int i = 0; i < docs.length; i++) {
            // 排序方便后面计算交集和并集
            Arrays.sort(docs[i]);
            for (int j = 0; j < docs[i].length; j++) {
                map.putIfAbsent(docs[i][j], new ArrayList<>());
                map.get(docs[i][j]).add(i);
                if (map.get(docs[i][j]).size() > 1) {
                    moreThan1Set.add(docs[i][j]);
                }
            }
        }
        HashSet<Integer> pairSet = new HashSet<>();
        List<String> result = new LinkedList<>();
        for (int id : moreThan1Set) {
            List<Integer> idDoc = map.get(id);
            for (int i = 0; i < idDoc.size() - 1; i++) {
                for (int j = i + 1; j < idDoc.size(); j++) {
                    if (pairSet.contains(idDoc.get(i) * 500 + idDoc.get(j))) {
                        continue;
                    }
                    addSimToResult(result, docs, idDoc.get(i), idDoc.get(j));
                    pairSet.add(idDoc.get(i) * 500 + idDoc.get(j));
                }
            }
        }
        return result;
    }

    private void addSimToResult(List<String> result, int[][] docs, int docId1, int docId2) {
        int[] doc1 = docs[docId1];
        int[] doc2 = docs[docId2];
        int intersectCount = 0;
        int combineCount = 0;
        int i1 = 0;
        int i2 = 0;
        while (i1 < doc1.length && i2 < doc2.length) {
            if (doc1[i1] == doc2[i2]) {
                intersectCount++;
                combineCount++;
                i1++;
                i2++;
            } else if (doc1[i1] < doc2[i2]) {
                combineCount++;
                i1++;
            } else {
                combineCount++;
                i2++;
            }
        }
        combineCount += doc1.length - i1 + doc2.length - i2;
        result.add(String.format("%d,%d: %.4f", docId1, docId2, (double) intersectCount / combineCount));
    }

    /**
     * 超时
     *
     * @param docs
     * @return
     */
    public List<String> computeSimilarities2(int[][] docs) {
        Map<Integer, Set<Integer>> map = new HashMap<>();
        HashSet<Integer> moreThan1Set = new HashSet<>();
        for (int i = 0; i < docs.length; i++) {
            for (int j = 0; j < docs[i].length; j++) {
                map.putIfAbsent(docs[i][j], new HashSet<>());
                map.get(docs[i][j]).add(i);
                if (map.get(docs[i][j]).size() > 1) {
                    moreThan1Set.add(docs[i][j]);
                }
            }
        }
        HashSet<Integer> pairSet = new HashSet<>();
        List<String> result = new LinkedList<>();
        for (int id : moreThan1Set) {
            List<Integer> idDoc = new ArrayList<>(map.get(id));
            for (int i = 0; i < idDoc.size() - 1; i++) {
                for (int j = i + 1; j < idDoc.size(); j++) {
                    int min = Math.min(idDoc.get(i), idDoc.get(j));
                    int max = Math.max(idDoc.get(i), idDoc.get(j));
                    if (pairSet.contains(min * 500 + max)) {
                        continue;
                    }
                    addSimToResult(result, docs, min, max, map);
                    pairSet.add(min * 500 + max);
                }
            }
        }
        return result;
    }

    private void addSimToResult(List<String> result, int[][] docs, int docId1, int docId2, Map<Integer, Set<Integer>> map) {
        int[] doc1 = docs[docId1];
        int[] doc2 = docs[docId2];
        int intersectCount = 0;
        int combineCount = 0;
        for (int i : doc1) {
            if (map.get(i).contains(docId2)) {
                intersectCount++;
            }
            combineCount++;
        }
        for (int i : doc2) {
            if (!map.get(i).contains(docId1)) {
                combineCount++;
            }
        }
        result.add(String.format("%d,%d: %.4f", docId1, docId2, (double) intersectCount / combineCount));
    }
}
