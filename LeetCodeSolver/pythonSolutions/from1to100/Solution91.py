class Solution:
    """
    91.解码方法 | 难度：中等 | 标签：字符串、动态规划
    一条包含字母 A-Z 的消息通过以下映射进行了 编码 ：
    <p>
    'A' -> 1
    'B' -> 2
    ...
    'Z' -> 26
    要 解码 已编码的消息，所有数字必须基于上述映射的方法，反向映射回字母（可能有多种方法）。例如，"11106" 可以映射为：
    <p>
    "AAJF" ，将消息分组为 (1 1 10 6)
    "KJF" ，将消息分组为 (11 10 6)
    注意，消息不能分组为  (1 11 06) ，因为 "06" 不能映射为 "F" ，这是由于 "6" 和 "06" 在映射中并不等价。
    <p>
    给你一个只含数字的 非空 字符串 s ，请计算并返回 解码 方法的 总数 。
    <p>
    题目数据保证答案肯定是一个 32 位 的整数。
    <p>
    示例 1：
    输入：s = "12"
    输出：2
    解释：它可以解码为 "AB"（1 2）或者 "L"（12）。
    <p>
    示例 2：
    输入：s = "226"
    输出：3
    解释：它可以解码为 "BZ" (2 26), "VF" (22 6), 或者 "BBF" (2 2 6) 。
    <p>
    示例 3：
    输入：s = "0"
    输出：0
    解释：没有字符映射到以 0 开头的数字。
    含有 0 的有效映射是 'J' -> "10" 和 'T'-> "20" 。
    由于没有字符，因此没有有效的方法对此进行解码，因为所有数字都需要映射。
    <p>
    示例 4：
    输入：s = "06"
    输出：0
    解释："06" 不能映射到 "F" ，因为字符串含有前导 0（"6" 和 "06" 在映射中并不等价）。
    <p>
    提示：
    1 <= s.length <= 100
    s 只包含数字，并且可能包含前导零。
    <p>
    来源：力扣（LeetCode）
    链接：https://leetcode-cn.com/problems/decode-ways
    著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
    """

    def numDecodings(self, s: str) -> int:
        """
        执行用时： 32 ms , 在所有 Python3 提交中击败了 96.87% 的用户
        内存消耗： 14.9 MB , 在所有 Python3 提交中击败了 40.15% 的用户
        :param s:
        :return:
        """
        if s[0] == '0':
            return 0
        n = len(s)
        dp = [0] * (n + 1)
        dp[0] = 1
        dp[1] = 1
        for i in range(2, n + 1):
            if s[i - 1] == '0':
                if s[i - 2] == '1' or s[i - 2] == '2':
                    dp[i] = dp[i - 2]
                else:
                    return 0
            elif s[i - 2] > '2' or s[i - 2] == '0' or (s[i - 2] == '2' and s[i - 1] > '6'):
                dp[i] = dp[i - 1]
            else:
                dp[i] = dp[i - 1] + dp[i - 2]
        return dp[n]
