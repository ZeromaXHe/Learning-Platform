############################################################
#  	Default Logging Configuration File
#
# You can use a different file by specifying a filename
# with the java.util.logging.config.file system property.  
# For example java -Djava.util.logging.config.file=myfile
############################################################
############################################################
#  	Global properties
############################################################
# "handlers" specifies a comma separated list of log Handler
# classes.  These handlers will be installed during VM startup.
# Note that these classes must be on the system classpath.
# By default we only configure a ConsoleHandler, which will only
# show messages at the INFO and above levels.
# RootLogger \u9876\u7EA7\u7236\u5143\u7D20\u6307\u5B9A\u7684\u9ED8\u8BA4\u5904\u7406\u5668
handlers=java.util.logging.ConsoleHandler,java.util.logging.FileHandler
# To also add the FileHandler, use the following line instead.
#handlers= java.util.logging.FileHandler, java.util.logging.ConsoleHandler
# Default global logging level.
# This specifies which kinds of events are logged across
# all loggers.  For any given facility this global level
# can be overriden by a facility specific level
# Note that the ConsoleHandler also has a separate level
# setting to limit messages printed to the console.
# RootLogger \u9876\u7EA7\u7236\u5143\u7D20\u9ED8\u8BA4\u7684\u65E5\u5FD7\u7EA7\u522B
.level=ALL
# \u81EA\u5B9A\u4E49 Logger
com.zerox.handlers=java.util.logging.ConsoleHandler
com.zerox.level=CONFIG
# \u5173\u95ED\u9ED8\u8BA4\u914D\u7F6E
com.zerox.useParentHandlers=false
############################################################
# Handler specific properties.
# Describes specific configuration info for Handlers.
############################################################
# default file output is in user's home directory.
# \u6A21\u5F0F\u7531\u5305\u62EC\u5982\u4E0B\u7279\u6B8A\u7EC4\u4EF6\u7684\u5B57\u7B26\u4E32\u7EC4\u6210\uFF0C\u5219\u8FD0\u884C\u65F6\u8981\u66FF\u6362\u8FD9\u4E9B\u7EC4\u4EF6\uFF1A
# "/" \u672C\u5730\u8DEF\u5F84\u540D\u5206\u9694\u7B26
# "%t" \u7CFB\u7EDF\u4E34\u65F6\u76EE\u5F55
# "%h" "user.home" \u7CFB\u7EDF\u5C5E\u6027\u7684\u503C
# "%g" \u533A\u5206\u5FAA\u73AF\u65E5\u5FD7\u7684\u751F\u6210\u53F7
# "%u" \u89E3\u51B3\u51B2\u7A81\u7684\u552F\u4E00\u53F7\u7801
# "%%" \u8F6C\u6362\u4E3A\u5355\u4E2A\u767E\u5206\u6570\u7B26\u53F7"%"
java.util.logging.FileHandler.pattern=logs/java%u.log
# \u65E5\u5FD7\u6587\u4EF6\u5185\u5BB9\u5927\u5C0F
java.util.logging.FileHandler.limit=50000
# \u65E5\u5FD7\u6587\u4EF6\u6570\u91CF
java.util.logging.FileHandler.count=1
# \u6307\u5B9A handler \u5BF9\u8C61\u65E5\u5FD7\u6D88\u606F\u683C\u5F0F\u5BF9\u8C61
#java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter
java.util.logging.FileHandler.formatter=java.util.logging.SimpleFormatter
# \u4EE5\u8FFD\u52A0\u65B9\u5F0F\u6DFB\u52A0\u65E5\u5FD7
java.util.logging.FileHandler.append=true
# Limit the message that are printed on the console to INFO and above.
java.util.logging.ConsoleHandler.level=ALL
java.util.logging.ConsoleHandler.formatter=java.util.logging.SimpleFormatter
java.util.logging.ConsoleHandler.encoding=UTF-8
# Example to customize the SimpleFormatter output format
# to print one-line log message like this:
#     <level>: <log message> [<date/time>]
#
# java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n
java.util.logging.SimpleFormatter.format=%4$s: %5$s [%1$tc]%n
############################################################
# Facility specific properties.
# Provides extra control for each logger.
############################################################
# For example, set the com.xyz.foo logger to only log SEVERE
# messages:
com.xyz.foo.level=SEVERE
