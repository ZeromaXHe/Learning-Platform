<?xml version="1.0" encoding="UTF-8" ?>
<!--
status 日志框架本身输出的日志级别
monitorInterval 自动加载配置文件的间隔时间，下面配置即不低于 5 秒
-->
<Configuration status="debug" monitorInterval="5">
    <!-- 集中配置属性进行管理，使用时格式为：${name} -->
    <properties>
        <property name="LOG_HOME">C:/logs</property>
    </properties>

    <!-- 日志处理器 -->
    <Appenders>
        <!-- 控制台输出 appender -->
        <Console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="[%d{HH:mm:ss.SSS}] [%t] [%-5level] %c{36}:%L --- %m%n"/>
        </Console>
        <!-- 日志文件输出 appender -->
        <File name="file" fileName="${LOG_HOME}/myFile.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n"/>
        </File>
        <!-- 异步 Appender，这种异步性能提升不高 -->
        <Async name="Async">
            <AppenderRef ref="file"/>
        </Async>
        <!-- 使用随机读写流的日志文件输出 appender，性能提高 -->
        <RandomAccessFile name="accessFile" fileName="${LOG_HOME}/myAccFile.log">
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %m%n"/>
        </RandomAccessFile>
        <!-- 按照一定规则拆分的日志文件的 appender -->
        <RollingFile name="rollingFile" fileName="${LOG_HOME}/myRollingFile.log"
                     filePattern="${LOG_HOME}/$${date:yyyy-MM-dd}/myRollingFile-%d{yyyy-MM-dd-HH-mm}-%i.log">
            <!-- 日志级别过滤器 -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%-5level] %l %c{36} - %msg%n"/>
            <Policies>
                <!-- 系统启动时，触发拆分规则，生成一个新的日志文件 -->
                <OnStartupTriggeringPolicy/>
                <!-- 按照时间节点拆分 -->
                <SizeBasedTriggeringPolicy size="1MB"/>
                <!-- 按照时间节点拆分，规则根据 filePattern 定义的 -->
                <TimeBasedTriggeringPolicy/>
            </Policies>
            <!-- 在同一个目录下，文件的个数限定，超过会对最旧的进行覆盖 -->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>
    </Appenders>
    <Loggers>
        <!--
         自定义异步 Logger
         includeLocation 日志记录的行号信息（如果不关闭，会对性能造成严重负面影响，比同步日志还慢）
         -->
        <AsyncLogger name="com.zerox" level="trace" includeLocation="false" additivity="false">
            <AppenderRef ref="Console"/>
            <!-- 异步 Logger 和异步 Appender 不要同时使用，否则性能会和异步 Appender 一致，比较慢 -->
            <AppenderRef ref="file"/>
        </AsyncLogger>
        <!-- level：rootLogger 配置日志级别 -->
        <Root level="trace">
            <AppenderRef ref="Console"/>
            <AppenderRef ref="Async"/>
        </Root>
    </Loggers>
</Configuration>